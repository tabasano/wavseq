exec main script with no args for up-to-date syntax. 


>>一般的なＭＭＬとのおもな違い

・小文字がナチュラル。大文字は＃音。フラットはなし。変わるかも。
・音符以外の指令はほぼ（）でくくる形。
・オクターブ指定がなければ近いほうへ移動する。なので[cdefgab]12などはどんどん上に行く。bfbfはどっちだったかな。
・+-がオクターブ指定
・長さは音符名（付点八分音符等）ではなくて一拍を基準にした長さ。a一拍半＝'a1.5'
　三連符困るだろうといってもそれは音符名にしても変わらない問題なのでいいかなと。
　現状では誤差対策では連符表記がよい。


>>主なコマンド

cdefgab　音符高さ：ドレミファソラシ.長さは数字で後ろに置く（省略で１拍。）
　　　　大文字は半音上げ
r 　　　休符
数字　　音符,休符の長さ。
a2.5　　音符aを２拍半。

~　　　　タイ。うしろに長さを置く。なければ一拍。
　　　　a0.5 ~bcでa1.5b1c1と同じ
　　　　a0.5 ~2bcでa2.5b1c1と同じ
/:abc/　　連符。abcを一拍に入れ三連符にする
/2:abc/　abcを二拍に均等に入れ三連符にする
/*120:abcd/　abcdを120tickに均等に入れ連符にする。（誤差は調整される）
+　　　　オクターブ上げる
-　　　　オクターブ下げる
>　　　　テンポ下げる
<　　　　テンポ上げる
(tempo:120) テンポを数値で設定
v60　　　ベロシティを60に設定（0~127）
(p:piano)　このトラックの音色をピアノに設定。(音色リストから'piano'を探す。リスト各行先頭が音色番号。)
(p:guit,3)　音色リストから'guit'を探し、3番目の音色を選択。
(x:64)　　音符高さをmidiノート番号６４に指定
(pan:>40)　パンポットを右に40で設定（0~63)
(pan:<40)　パンポットを左に40で設定


>>その他のコマンド

[abc]4　　abcを4回繰り返す
|||　　　トラックの区切り
///　　　ページの区切り。
　　　　　「いちぺーじ|||b|||c////にぺーじ|||e|||f」
　　　　　は 
　　　　　「(トラック１)いちぺーじ;にぺーじ|||(トラック２)be|||(トラック３)cf」
　　　　　と読み込まれる。
(g:80)　　音長に対する実際の長さの割合。ゲート８０に設定。
X:=abc　　マクロ'X'を設定。曲中のXはabcに置き換えられる。
　　　　　使用時に$X,${X}などと指定する。
          一行まるごと置換される。入れ子もできるが不完全かも。
macro X:=abc
　　　　　上に同じ。
(on:a)　　'a'を鳴らし、時間を進めない。　コマンド'a'は'(on:a)(wait:1)(off:a)'と同じ。'(on:a)b(off:a)'でabを同時に鳴らせる。
          このへんはベンドやビブラート処理を書くためで、いい書法ができたら内部処理以外では使わなくてもいいようにする方向。
(wait:1)　一拍待つ
(off:a)　'a'を止める
(off:all) onで鳴っているものをすべて止める
(ch:2)　　midiチャンネルを２に設定
(ch:drum) midiチャンネルをdrum channelに設定。
(cc:1,2)　midiコントロールチェンジ
a*120　　音符a,長さ120tick
;;　　　　コメント行　読み飛ばす
&(00 00)　midiデータを１６進数で直接書き込む
(loadf:file.mid,2) 外部midiファイルfile.midのトラック2を読み込む。編集はしない。このトラックはほかのデータを含まない。
;　　　　改行と同じ
改行、空白　　読み飛ばす
_snare!　　drum kitからsnareという文字を探して選択し鳴らす。
{64}     　ノート番号64の音。 ='(x:64)'
{c,e,g}    cde同時に鳴らす。 = '(on:c)(on:e)(on:g)(wait:1)(off:c)(off:e)(off:g)'
:cmaj7,    コード名。ルート音名'c'。大文字ならシャープ。

(stroke:4) コードの各音の間隔。tick単位
(V:50,60,70) ベロシティ一括指定。区切りは空白かコンマ。デフォルト値を使う場合は'o'またはブランクで。
             以下同様、連続音名指定の直前に書くことで修飾的に処理される。（スタック変数に入れられる）
             足りない場合は後方はデフォルト値になる。'(V:1,2,3)cdefgab'の場合は1,2,3はcdeに係る。
(G:...)      ゲート一括指定
(A:...)      ベンドなどの一括指定
(L:...)      音長の一括指定
(N:...)      音名の一括指定。c,d,e,46など。
(gm:on)      ＧＭ on, midi命令。
(gs:reset)
(xg:on)
(syswait:) gm:onなどのトラックとの時間調整のため。
(key:-4)   キーを全体的に4半音下げる
基本命令は音命令＋長さ命令。音命令は以下のもの。
      'c',  '{64}', '_snare!', '{d,g,-b}', ':cmaj7,'


>>その他

変換の順序
　ページ、トラックの分割、連結 >> コメント取り除き >> マクロ設定、置換 >> 繰り返し処理 >> 音データ変換
midiチャンネルの指定がなければ自動で順番に割り当てられます。１６トラック以上にならない場合は考える必要はないでしょう。
同じチャンネルを使っているトラックが複数ある場合、音色切り替えが影響されます。
ドラム音はその音のみドラムチャンネルが使われます。
チャンネル指定などは内部データを使うのでドラムチャンネル１０指定は(ch:9)となります。変更するかも。
tickを使う場合はずれは生じません。小数を使う場合現状では丸め誤差が調整されません。
分解能により４８０＊０．３３＝１５８．４ということでこの場合一回につき0.4tick、１００回繰返すと４０tick(12分の一拍分)のずれとなります。
a0.333b0.333c0.333
こうすると繰り上がって正確に160,160,160tickの三連符になります。しかしまあ気持ち悪い。
現状では以下のようにすれば誤差は調整されます。
   /abc/　３連符
 　/ababaca/ 7連符
 　/2:aaaaccccbbbbdddde/ 二拍の中に１７連符
   　この場合誤差の合計が８tickになりますが８音分について1tickずつ引きます。midiデータとして正確に１７等分したいなら分解能を連符の倍数にする以外ない。
連符内は相対的な長さ。以下はおなじ。
  /abc/ /abc/
  /a2b2c2/ /a2b2c2/
  /2:abcabc/
tickは使おうと思えば使えるが使わなくてもいいような方向で
